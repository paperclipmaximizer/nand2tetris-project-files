// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
// // TODO: 
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

  PARTS:
    Mux16(a=x,sel=zx,out=xzx);
    Not16(in=xzx,out=negx);
    Mux16(a=xzx,b=negx,sel=nx,out=x2);

    Mux16(a=y,sel=zy,out=zyz);
    Not16(in=zyz,out=negy);
    Mux16(a=zyz,b=negy,sel=ny,out=y2);

    
    Add16(a=x2,b=y2,out=plusxy);
    And16(a=x2,b=y2,out=andxy); 
    Mux16(a=andxy,b=plusxy,sel=f,out=fxy);

    Not16(in=fxy,out=nfxy);
    Mux16(a=fxy,b=nfxy,sel=no,out=out,out[15]=o1,out[0..7]=lefto,out[8..15]=righto);

    Or8Way(in=lefto,out=zrl);
    Or8Way(in=righto,out=zrr);
    Or(a=zrl,b=zrr,out=zrlor);
    Not(in=zrlor,out=zr);
    
    And(a=o1,b=true,out=ng);
}
